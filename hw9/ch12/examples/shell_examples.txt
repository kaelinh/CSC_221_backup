In [1]: !pip3 install openpyxl
Collecting openpyxl
  Downloading openpyxl-2.4.6.tar.gz (194kB)
    100% |████████████████████████████████| 194kB 128kB/s 
Collecting jdcal (from openpyxl)
  Downloading jdcal-1.3.tar.gz
Collecting et_xmlfile (from openpyxl)
  Downloading et_xmlfile-1.0.1.tar.gz
Installing collected packages: jdcal, et-xmlfile, openpyxl
  Running setup.py install for jdcal ... done
  Running setup.py install for et-xmlfile ... done
  Running setup.py install for openpyxl ... done
Successfully installed et-xmlfile-1.0.1 jdcal-1.3 openpyxl-2.4.6

In [2]: import openpyxl

In [3]: pwd
Out[3]: '/Users/kaelinhanson/Desktop/all_Folders/CSC221/csc221/csc221/hw/hw9/ch12/examples'

In [4]: ls
example.xlsx*

In [5]: wb = openpyxl.load_workbook('example.xlsx')

In [6]: type(wb)
Out[6]: openpyxl.workbook.workbook.Workbook

In [7]: wb
Out[7]: <openpyxl.workbook.workbook.Workbook at 0x106625048>

In [8]: wb.get_sheet_names
Out[8]: <bound method Workbook.get_sheet_names of <openpyxl.workbook.workbook.Workbook object at 0x106625048>>

In [9]: wb.get_sheet_names()
Out[9]: ['Sheet1', 'Sheet2', 'Sheet3']

In [10]: sheet = wb.get_sheet_by_name('Sheet3')

In [11]: sheet
Out[11]: <Worksheet "Sheet3">

In [12]: type(sheet)
Out[12]: openpyxl.worksheet.worksheet.Worksheet

In [13]: sheet.title
Out[13]: 'Sheet3'

In [14]: anotherSheet = wb.active

In [15]: anotherSheet
Out[15]: <Worksheet "Sheet1">

In [16]: sheet = wb.get_sheet_by_name('Sheet1')

In [17]: sheet['A1']
Out[17]: <Cell 'Sheet1'.A1>

In [18]: sheet['A1'].value
Out[18]: datetime.datetime(2015, 4, 5, 13, 34, 2)

In [19]: c = sheet['B1']

In [20]: c.value
Out[20]: 'Apples'

In [21]: 'Row' + str(c.row) + ', Column ' +c.column + 'is' + c.value
Out[21]: 'Row1, Column BisApples'

In [22]: 'Row' + str(c.row) + ', Column ' +c.column + ' is' + c.value
Out[22]: 'Row1, Column B isApples'

In [23]: 'Row' + str(c.row) + ', Column ' +c.column + ' is ' + c.value
Out[23]: 'Row1, Column B is Apples'

In [24]: 'Cell' + c.coordinate + ' is ' + c.value
Out[24]: 'CellB1 is Apples'

In [25]: 'Cell ' + c.coordinate + ' is ' + c.value
Out[25]: 'Cell B1 is Apples'

In [26]: sheet['C1'].value
Out[26]: 73

In [27]: sheet.cell(row=1, column=2)
Out[27]: <Cell 'Sheet1'.B1>

In [28]: sheet.cell(row=1, column=2).value
Out[28]: 'Apples'

In [29]: for i in range(1,8,2):
    ...:     print(i,sheet.cell(row=i, column=2).value)
    ...:     
1 Apples
3 Pears
5 Apples
7 Strawberries

In [30]: wb = openpyxl.load_workbook('example.xlsx')

In [31]: sheet = wb.get_sheet_by_name('Sheet1')

In [32]: sheet.max_row
Out[32]: 7

In [33]: sheet.max_column
Out[33]: 3

In [34]: from openpyxl.cell import get_column_letter, column_index_from_string
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-34-4b8cd4ebaec2> in <module>()
----> 1 from openpyxl.cell import get_column_letter, column_index_from_string

ImportError: cannot import name 'get_column_letter'

In [35]: from openpyxl.cell import get_column_letter
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-35-1d5187b214b1> in <module>()
----> 1 from openpyxl.cell import get_column_letter

ImportError: cannot import name 'get_column_letter'

In [36]: import openpyxl

In [37]: from openpyxl.cell import get_column_letter, column_index_from_string
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-37-4b8cd4ebaec2> in <module>()
----> 1 from openpyxl.cell import get_column_letter, column_index_from_string

ImportError: cannot import name 'get_column_letter'

In [38]: from openpyxl.utils import get_column_letter, column_index_from_string

In [39]: get_column_letter(1)
Out[39]: 'A'

In [40]: get_column_letter(2)
Out[40]: 'B'

In [41]: get_column_letter(27)
Out[41]: 'AA'

In [42]: get_column_letter(900)
Out[42]: 'AHP'

In [43]: wb = openpyxl.load_workbook('example.xlsx')

In [44]: sheet = wb.get_sheet_by_name('Sheet1')

In [45]: get_column_letter(sheet.max_column)
Out[45]: 'C'

In [46]: column_index_from_string('A')
Out[46]: 1

In [47]: column_index_from_string('AA')
Out[47]: 27

In [48]: tuple(sheet['A1':'C3'])
Out[48]: 
((<Cell 'Sheet1'.A1>, <Cell 'Sheet1'.B1>, <Cell 'Sheet1'.C1>),
 (<Cell 'Sheet1'.A2>, <Cell 'Sheet1'.B2>, <Cell 'Sheet1'.C2>),
 (<Cell 'Sheet1'.A3>, <Cell 'Sheet1'.B3>, <Cell 'Sheet1'.C3>))

In [49]: for rowOfCellObjects in sheet['A1':'C3']:
    ...:     for cellObj in rowOfCellObjects:
    ...:         print(cellObj.coordinate, cellObj.value)
    ...:     print('--- END OF ROW ---')
    ...:     
A1 2015-04-05 13:34:02
B1 Apples
C1 73
--- END OF ROW ---
A2 2015-04-05 03:41:23
B2 Cherries
C2 85
--- END OF ROW ---
A3 2015-04-06 12:46:51
B3 Pears
C3 14
--- END OF ROW ---
** It was here that I found out that 'openpyxl' had upgraded from 2.3.3, the version used in the tutorial, to 2.4 **
In [69]: list(sheet.columns)[1]
Out[69]: 
(<Cell 'Sheet1'.B1>,
 <Cell 'Sheet1'.B2>,
 <Cell 'Sheet1'.B3>,
 <Cell 'Sheet1'.B4>,
 <Cell 'Sheet1'.B5>,
 <Cell 'Sheet1'.B6>,
 <Cell 'Sheet1'.B7>)

In [70]: for cellObj in list(sheet.columns)[1]:
    ...:     print(cellObj.value)
    ...:     
Apples
Cherries
Pears
Oranges
Apples
Bananas
Strawberries:

In [5]: import openpyxl

In [6]: wb = openpyxl.Workbook()

In [7]: wb.get_sheet_names()
Out[7]: ['Sheet']

In [8]: sheet = wb.active

In [9]: sheet.title
Out[9]: 'Sheet'

In [10]: sheet.title = 'Spam Bacon Eggs Sheet'

In [11]: wb.get_sheet_names()
Out[11]: ['Spam Bacon Eggs Sheet']


In [2]: wb = openpyxl.load_workbook('example.xlsx')

In [3]: sheet = wb.active

In [4]: sheet.title = 'Spam Spam Spam'

In [5]: wb.save('example_copy.xlsx')

In [6]: wb = openpyxl.Workbook()

In [7]: wb.get_sheet_names()
Out[7]: ['Sheet']

In [8]: wb.create_sheet()
Out[8]: <Worksheet "Sheet1">

In [9]: wb.get_sheet_names()
Out[9]: ['Sheet', 'Sheet1']

In [10]: wb.create_sheet(index=0, title='First Sheet')
Out[10]: <Worksheet "First Sheet">

In [11]: wb.get_sheet_names()
Out[11]: ['First Sheet', 'Sheet', 'Sheet1']

In [12]: wb.create_sheet(index=2, title='Middle Sheet')
Out[12]: <Worksheet "Middle Sheet">

In [13]: wb.get_sheet_names()
Out[13]: ['First Sheet', 'Sheet', 'Middle Sheet', 'Sheet1']

In [14]: wb.get_sheet_names()
Out[14]: ['First Sheet', 'Sheet', 'Middle Sheet', 'Sheet1']

In [15]: wb.remove_sheet(wb.get_sheet_by_name('Middle Sheet'))

In [16]: wb.remove_sheet(wb.get_sheet_by_name('sheet1'))
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-16-a50398fe46a0> in <module>()
----> 1 wb.remove_sheet(wb.get_sheet_by_name('sheet1'))

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/openpyxl/compat/__init__.py in new_func(*args, **kwargs)
     58                 lineno=_code.co_firstlineno + 1
     59             )
---> 60             return obj(*args, **kwargs)
     61         return new_func
     62 

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/openpyxl/workbook/workbook.py in get_sheet_by_name(self, name)
    203 
    204         """
--> 205         return self[name]
    206 
    207     def __contains__(self, key):

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/openpyxl/workbook/workbook.py in __getitem__(self, key)
    229             if sheet.title == key:
    230                 return sheet
--> 231         raise KeyError("Worksheet {0} does not exist.".format(key))
    232 
    233     def __delitem__(self, key):

KeyError: 'Worksheet sheet1 does not exist.'

In [17]: wb.get_sheet_names()
Out[17]: ['First Sheet', 'Sheet', 'Sheet1']

In [18]: wb.remove_sheet(wb.get_sheet_by_name('Sheet1'))

In [19]: wb.get_sheet_names()
Out[19]: ['First Sheet', 'Sheet']

In [20]: sheet = wb.get_sheet_by_name('Sheet')

In [21]: sheet['A1'] = 'Hello World!'

In [22]: sheet['A1'].value
Out[22]: 'Hello World!'

In [23]: from openpyxl.styles import Font

In [24]: wb = openpyxl.Workbook()

In [25]: sheet = wb.get_sheet_by_name('Sheet')

In [26]: italic24Font = Font(size=24, italic=True)

In [27]: sheet['A1'].font = italic24Font

In [28]: sheet['A1'] = 'Hello world!'

In [29]: wb.save('styled.xlsx')

In [30]: sheet = wb.get_sheet_by_name('Sheet')

In [31]: fontObj1 = Font(name='Times New Roman', bold=True)

In [32]: sheet['A1'].font=fontObj1

In [33]: sheet['A1'] = 'Bold Times New Roman'

In [34]: fontObj2= Font(size=24, italic=True)

In [35]: sheet['B3'].font = fontObj2

In [36]: sheet['B3']='24 pt Italic'

In [37]: wb.save('styles.xlsx')

In [38]: wb = openpyxl.Workbook()

In [39]: sheet = wb.active

In [40]: sheet['A1'] = 200

In [41]: sheet['A2'] = 300

In [42]: sheet['A3'] = '=SUM(A1:A2)'

In [43]: wb.save('writeFormula.xlsx')

In [44]: wb = openpyxl.Workbook()

In [45]: sheet = wb.active

In [46]: sheet['A1'] = 'Tall row'

In [47]: sheet['B2'] = 'Wide Column'

In [48]: sheet.row_dimensions[1].height = 70

In [49]: sheet.column_dimensions
Out[49]: 
DimensionHolder(<bound method Worksheet._add_column of <Worksheet "Sheet">>,
                {})

In [50]: sheet.column_dimensions['B'].width = 20

In [51]: wb.save('dimensions.xlsx')

In [52]: sheet.merge_cells('A1:D3')

In [53]: sheet['A1'] = 'Twelve cells merged together.'

In [54]: sheet.merge_cells('C5:D5')

In [55]: sheet['C5'] = 'Two merged cells.'

In [56]: wb.save('merged.xlsx')

In [57]: sheet.unmerge_cells('A1:D3')

In [58]: sheet.unmerge_cells('C5:D5')

In [59]: wb.save('merged.xlsx')

In [60]: sheet.freeze_panes = 'A2'

In [61]: wb.save('freezeExample.xlsx')

In [62]: sheet = wb.active

In [63]: for i in range(1, 11):
    ...:     sheet['A' + str(i)]=i
    ...:     

In [64]: refObj = openpyxl.chart.Reference(sheet, min_col=1, min_row=1, max_col=1,max_row=10)

In [65]: seriesObj = openpyxl.chart.Series(refObj, title='First series')

In [66]: chartObj = openpyxl.chart.BarChart()

In [67]: chartObj.title = 'My Chart'

In [68]: chartObj.append(seriesObj)

In [69]: sheet.add_chart(chartObj, 'C5')

In [70]: wb.save('sampleChart.xlsx')


