
In [1]: import PyPDF2

In [2]: pdfFileObj = open('meetingminutes.pdf', 'rb')

In [3]: pdfReader = PyPDF2.PdfFileReader(pdfFileObj)

In [4]: pdfReader.numPages
Out[4]: 19

In [5]: pageObj = pdfReader.getPage(0)

In [6]: pageObj.extractText()
Out[6]: 'OOFFFFIICCIIAALL  BBOOAARRDD  MMIINNUUTTEESS   Meeting of \nMarch 7\n, 2014\n        \n     The Board of Elementary and Secondary Education shall provide leadership and \ncreate policies for education that expand opportunities for children, empower \nfamilies and communities, and advance Louisiana in an increasingly \ncompetitive glob\nal market.\n BOARD \n of ELEMENTARY\n and \n SECONDARY\n EDUCATION\n  '






In [7]: pdfReader = PyPDF2.PdfFileReader(open('encrypted.pdf', 'rb'))

In [8]: pdfReader.isEncrypted
Out[8]: True

In [9]: pdfReader.getPage(0)
---------------------------------------------------------------------------
PdfReadError                              Traceback (most recent call last)
<ipython-input-9-ae7714e4bb5c> in <module>()
----> 1 pdfReader.getPage(0)

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/PyPDF2/pdf.py in getPage(self, pageNumber)
   1174         #assert not self.trailer.has_key("/Encrypt")
   1175         if self.flattenedPages == None:
-> 1176             self._flatten()
   1177         return self.flattenedPages[pageNumber]
   1178 

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/PyPDF2/pdf.py in _flatten(self, pages, inherit, indirectRef)
   1503         if pages == None:
   1504             self.flattenedPages = []
-> 1505             catalog = self.trailer["/Root"].getObject()
   1506             pages = catalog["/Pages"].getObject()
   1507 

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/PyPDF2/generic.py in __getitem__(self, key)
    514 
    515     def __getitem__(self, key):
--> 516         return dict.__getitem__(self, key).getObject()
    517 
    518     ##

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/PyPDF2/generic.py in getObject(self)
    176 
    177     def getObject(self):
--> 178         return self.pdf.getObject(self).getObject()
    179 
    180     def __repr__(self):

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/PyPDF2/pdf.py in getObject(self, indirectReference)
   1615                 # if we don't have the encryption key:
   1616                 if not hasattr(self, '_decryption_key'):
-> 1617                     raise utils.PdfReadError("file has not been decrypted")
   1618                 # otherwise, decrypt here...
   1619                 import struct

PdfReadError: file has not been decrypted

In [10]: pdfReader.decrypt('rosebud')
Out[10]: 1

In [11]: pageObj = pdfReader.getPage(0)
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-11-149f50e9f56f> in <module>()
----> 1 pageObj = pdfReader.getPage(0)

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/PyPDF2/pdf.py in getPage(self, pageNumber)
   1175         if self.flattenedPages == None:
   1176             self._flatten()
-> 1177         return self.flattenedPages[pageNumber]
   1178 
   1179     namedDestinations = property(lambda self:

IndexError: list index out of range

In [12]: pdf1File = open('meetingminutes.pdf', 'rb')

In [13]: pdf2File = open('meetingminutes2.pdf', 'rb')

In [14]: pdf1Reader = PyPDF2.PdfFileReader(pdf1File)

In [15]: pdf2Reader = PyPDF2.PdfFileReader(pdf2File)

In [16]: pdfWriter = PyPDF2.PdfFileWriter()

In [17]: for pageNum in range(pdf1Reader.numPages):
    ...:     pageObj = pdf1Reader.getPage(pageNum)
    ...:     pdfWriter.addPage(pageObj)
    ...:     

In [18]: for pageNum in range(pdf2Reader.numPages):
    ...:     pageObj = pdf2Reader.getPage(pageNum)
    ...:     pdfWriter.addPage(pageObj)
    ...:     

In [19]: pdfOutputFile = open('combinedminutes.pdf', 'wb')

In [20]: pdfWriter.write(pdfOutputFile)

In [21]: pdfOutputFile.close()

In [22]: pdf1File.close()

In [23]: pdf2File.close()

In [24]: minutesFile = open('meetingminutes.pdf', 'rb')

In [25]: pdfReader = PyPDF2.PdfFileReader(minutesFile)

In [26]: page=pdfReader.getPage(0)

In [27]: page.rotateClockwise(90)
Out[27]: 
{'/Contents': [IndirectObject(961, 0),
  IndirectObject(962, 0),
  IndirectObject(963, 0),
  IndirectObject(964, 0),
  IndirectObject(965, 0),
  IndirectObject(966, 0),
  IndirectObject(967, 0),
  IndirectObject(968, 0)],
 '/CropBox': [0, 0, 612, 792],
 '/MediaBox': [0, 0, 612, 792],
 '/Parent': {'/Count': 9,
  '/Kids': [IndirectObject(959, 0),
   IndirectObject(1, 0),
   IndirectObject(11, 0),
   IndirectObject(13, 0),
   IndirectObject(15, 0),
   IndirectObject(17, 0),
   IndirectObject(19, 0),
   IndirectObject(24, 0),
   IndirectObject(26, 0)],
  '/Parent': {'/Count': 19,
   '/Kids': [IndirectObject(953, 0),
    IndirectObject(954, 0),
    IndirectObject(955, 0)],
   '/Type': '/Pages'},
  '/Type': '/Pages'},
 '/Resources': {'/ColorSpace': {'/CS0': ['/ICCBased', IndirectObject(969, 0)],
   '/CS1': ['/ICCBased', IndirectObject(970, 0)],
   '/CS2': ['/ICCBased', IndirectObject(970, 0)]},
  '/ExtGState': {'/GS0': {'/AIS': <PyPDF2.generic.BooleanObject at 0x104732a58>,
    '/BM': '/Normal',
    '/CA': 1,
    '/OP': <PyPDF2.generic.BooleanObject at 0x104732ac8>,
    '/OPM': 1,
    '/SA': <PyPDF2.generic.BooleanObject at 0x104732e48>,
    '/SMask': '/None',
    '/Type': '/ExtGState',
    '/ca': 1,
    '/op': <PyPDF2.generic.BooleanObject at 0x104732be0>}},
  '/Font': {'/TT0': {'/BaseFont': '/Arial-Black',
    '/Encoding': '/WinAnsiEncoding',
    '/FirstChar': 0,
    '/FontDescriptor': {'/Ascent': 1083,
     '/CapHeight': 716,
     '/Descent': -307,
     '/Flags': 32,
     '/FontBBox': [-194, -307, 1688, 1083],
     '/FontFamily': 'Arial Black',
     '/FontName': '/Arial-Black',
     '/FontStretch': '/Normal',
     '/FontWeight': 900,
     '/ItalicAngle': 0,
     '/StemV': 200,
     '/Type': '/FontDescriptor',
     '/XHeight': 519},
    '/LastChar': 255,
    '/Subtype': '/TrueType',
    '/Type': '/Font',
    '/Widths': [750,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     333,
     500,
     660,
     667,
     1000,
     889,
     278,
     389,
     389,
     556,
     660,
     333,
     333,
     333,
     278,
     667,
     667,
     667,
     667,
     667,
     667,
     667,
     667,
     667,
     667,
     333,
     333,
     660,
     660,
     660,
     611,
     740,
     778,
     778,
     778,
     778,
     722,
     667,
     833,
     833,
     389,
     667,
     833,
     667,
     944,
     833,
     833,
     722,
     833,
     778,
     722,
     722,
     833,
     778,
     1000,
     778,
     778,
     722,
     389,
     278,
     389,
     660,
     500,
     333,
     667,
     667,
     667,
     667,
     667,
     389,
     667,
     667,
     333,
     333,
     667,
     333,
     1000,
     667,
     667,
     667,
     667,
     444,
     611,
     444,
     667,
     611,
     944,
     667,
     611,
     556,
     389,
     278,
     389,
     660,
     500,
     667,
     500,
     278,
     667,
     500,
     1000,
     667,
     667,
     333,
     1000,
     722,
     333,
     1000,
     500,
     722,
     500,
     500,
     278,
     278,
     500,
     500,
     500,
     500,
     1000,
     333,
     950,
     611,
     333,
     1000,
     500,
     556,
     778,
     333,
     333,
     667,
     667,
     660,
     667,
     278,
     667,
     333,
     800,
     400,
     667,
     660,
     333,
     800,
     500,
     400,
     660,
     400,
     400,
     333,
     667,
     850,
     333,
     333,
     400,
     400,
     667,
     1000,
     1000,
     1000,
     611,
     778,
     778,
     778,
     778,
     778,
     778,
     1000,
     778,
     722,
     722,
     722,
     722,
     389,
     389,
     389,
     389,
     778,
     833,
     833,
     833,
     833,
     833,
     833,
     660,
     833,
     833,
     833,
     833,
     833,
     778,
     722,
     667,
     667,
     667,
     667,
     667,
     667,
     667,
     1000,
     667,
     667,
     667,
     667,
     667,
     333,
     333,
     333,
     333,
     667,
     667,
     667,
     667,
     667,
     667,
     667,
     660,
     667,
     667,
     667,
     667,
     667,
     611,
     667,
     611]},
   '/TT1': {'/BaseFont': '/ArialMT',
    '/Encoding': '/WinAnsiEncoding',
    '/FirstChar': 0,
    '/FontDescriptor': {'/Ascent': 1006,
     '/CapHeight': 716,
     '/Descent': -325,
     '/Flags': 32,
     '/FontBBox': [-665, -325, 2000, 1006],
     '/FontFamily': 'Arial',
     '/FontName': '/ArialMT',
     '/FontStretch': '/Normal',
     '/FontWeight': 400,
     '/ItalicAngle': 0,
     '/StemV': 88,
     '/Type': '/FontDescriptor',
     '/XHeight': 519},
    '/LastChar': 255,
    '/Subtype': '/TrueType',
    '/Type': '/Font',
    '/Widths': [750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     278,
     278,
     355,
     556,
     556,
     889,
     667,
     191,
     333,
     333,
     389,
     584,
     278,
     333,
     278,
     278,
     556,
     556,
     556,
     556,
     556,
     556,
     556,
     556,
     556,
     556,
     278,
     278,
     584,
     584,
     584,
     556,
     1015,
     667,
     667,
     722,
     722,
     667,
     611,
     778,
     722,
     278,
     500,
     667,
     556,
     833,
     722,
     778,
     667,
     778,
     722,
     667,
     611,
     722,
     667,
     944,
     667,
     667,
     611,
     278,
     278,
     278,
     469,
     556,
     333,
     556,
     556,
     500,
     556,
     556,
     278,
     556,
     556,
     222,
     222,
     500,
     222,
     833,
     556,
     556,
     556,
     556,
     333,
     500,
     278,
     556,
     500,
     722,
     500,
     500,
     500,
     334,
     260,
     334,
     584,
     350,
     556,
     350,
     222,
     556,
     333,
     1000,
     556,
     556,
     333,
     1000,
     667,
     333,
     1000,
     350,
     611,
     350,
     350,
     222,
     222,
     333,
     333,
     350,
     556,
     1000,
     333,
     1000,
     500,
     333,
     944,
     350,
     500,
     667,
     278,
     333,
     556,
     556,
     556,
     556,
     260,
     556,
     333,
     737,
     370,
     556,
     584,
     333,
     737,
     552,
     400,
     549,
     333,
     333,
     333,
     576,
     537,
     333,
     333,
     333,
     365,
     556,
     834,
     834,
     834,
     611,
     667,
     667,
     667,
     667,
     667,
     667,
     1000,
     722,
     667,
     667,
     667,
     667,
     278,
     278,
     278,
     278,
     722,
     722,
     778,
     778,
     778,
     778,
     778,
     584,
     778,
     722,
     722,
     722,
     722,
     667,
     667,
     611,
     556,
     556,
     556,
     556,
     556,
     556,
     889,
     500,
     556,
     556,
     556,
     556,
     278,
     278,
     278,
     278,
     556,
     556,
     556,
     556,
     556,
     556,
     556,
     549,
     611,
     556,
     556,
     556,
     556,
     500,
     556,
     500]},
   '/TT2': {'/BaseFont': '/Tahoma-Bold',
    '/Encoding': '/WinAnsiEncoding',
    '/FirstChar': 0,
    '/FontDescriptor': {'/Ascent': 1065,
     '/CapHeight': 727,
     '/Descent': -216,
     '/Flags': 32,
     '/FontBBox': [-698, -216, 1625, 1065],
     '/FontFamily': 'Tahoma',
     '/FontName': '/Tahoma-Bold',
     '/FontStretch': '/Normal',
     '/FontWeight': 700,
     '/ItalicAngle': 0,
     '/StemV': 172,
     '/Type': '/FontDescriptor',
     '/XHeight': 548},
    '/LastChar': 255,
    '/Subtype': '/TrueType',
    '/Type': '/Font',
    '/Widths': [1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     1000,
     293,
     343,
     489,
     818,
     637,
     1199,
     781,
     275,
     454,
     454,
     637,
     818,
     313,
     431,
     313,
     577,
     637,
     637,
     637,
     637,
     637,
     637,
     637,
     637,
     637,
     637,
     363,
     363,
     818,
     818,
     818,
     566,
     920,
     685,
     686,
     667,
     757,
     615,
     581,
     745,
     764,
     483,
     500,
     696,
     572,
     893,
     771,
     770,
     657,
     770,
     726,
     633,
     612,
     739,
     675,
     1028,
     685,
     670,
     623,
     454,
     577,
     454,
     818,
     637,
     546,
     599,
     632,
     527,
     629,
     594,
     382,
     629,
     640,
     302,
     363,
     603,
     302,
     954,
     640,
     617,
     629,
     629,
     434,
     515,
     416,
     640,
     579,
     890,
     604,
     576,
     526,
     623,
     637,
     623,
     818,
     637,
     637,
     637,
     275,
     637,
     489,
     1000,
     637,
     637,
     546,
     1676,
     633,
     425,
     1037,
     637,
     623,
     637,
     637,
     275,
     275,
     489,
     489,
     637,
     637,
     909,
     546,
     861,
     515,
     425,
     985,
     637,
     526,
     670,
     293,
     343,
     637,
     637,
     637,
     637,
     637,
     637,
     546,
     929,
     508,
     703,
     818,
     431,
     929,
     637,
     520,
     818,
     539,
     539,
     546,
     651,
     637,
     363,
     546,
     539,
     539,
     703,
     1128,
     1128,
     1128,
     566,
     685,
     685,
     685,
     685,
     685,
     685,
     989,
     667,
     615,
     615,
     615,
     615,
     483,
     483,
     483,
     483,
     774,
     771,
     770,
     770,
     770,
     770,
     770,
     818,
     770,
     739,
     739,
     739,
     739,
     670,
     659,
     646,
     599,
     599,
     599,
     599,
     599,
     599,
     937,
     527,
     594,
     594,
     594,
     594,
     302,
     302,
     302,
     302,
     620,
     640,
     617,
     617,
     617,
     617,
     617,
     818,
     617,
     640,
     640,
     640,
     640,
     576,
     629,
     576]},
   '/TT3': {'/BaseFont': '/Arial-BoldMT',
    '/Encoding': '/WinAnsiEncoding',
    '/FirstChar': 0,
    '/FontDescriptor': {'/Ascent': 1018,
     '/CapHeight': 716,
     '/Descent': -376,
     '/Flags': 32,
     '/FontBBox': [-628, -376, 2000, 1018],
     '/FontFamily': 'Arial',
     '/FontName': '/Arial-BoldMT',
     '/FontStretch': '/Normal',
     '/FontWeight': 700,
     '/ItalicAngle': 0,
     '/StemV': 136,
     '/Type': '/FontDescriptor',
     '/XHeight': 519},
    '/LastChar': 255,
    '/Subtype': '/TrueType',
    '/Type': '/Font',
    '/Widths': [750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     750,
     278,
     333,
     474,
     556,
     556,
     889,
     722,
     238,
     333,
     333,
     389,
     584,
     278,
     333,
     278,
     278,
     556,
     556,
     556,
     556,
     556,
     556,
     556,
     556,
     556,
     556,
     333,
     333,
     584,
     584,
     584,
     611,
     975,
     722,
     722,
     722,
     722,
     667,
     611,
     778,
     722,
     278,
     556,
     722,
     611,
     833,
     722,
     778,
     667,
     778,
     722,
     667,
     611,
     722,
     667,
     944,
     667,
     667,
     611,
     333,
     278,
     333,
     584,
     556,
     333,
     556,
     611,
     556,
     611,
     556,
     333,
     611,
     611,
     278,
     278,
     556,
     278,
     889,
     611,
     611,
     611,
     611,
     389,
     556,
     333,
     611,
     556,
     778,
     556,
     556,
     500,
     389,
     280,
     389,
     584,
     350,
     556,
     350,
     278,
     556,
     500,
     1000,
     556,
     556,
     333,
     1000,
     667,
     333,
     1000,
     350,
     611,
     350,
     350,
     278,
     278,
     500,
     500,
     350,
     556,
     1000,
     333,
     1000,
     556,
     333,
     944,
     350,
     500,
     667,
     278,
     333,
     556,
     556,
     556,
     556,
     280,
     556,
     333,
     737,
     370,
     556,
     584,
     333,
     737,
     552,
     400,
     549,
     333,
     333,
     333,
     576,
     556,
     333,
     333,
     333,
     365,
     556,
     834,
     834,
     834,
     611,
     722,
     722,
     722,
     722,
     722,
     722,
     1000,
     722,
     667,
     667,
     667,
     667,
     278,
     278,
     278,
     278,
     722,
     722,
     778,
     778,
     778,
     778,
     778,
     584,
     778,
     722,
     722,
     722,
     722,
     667,
     667,
     611,
     556,
     556,
     556,
     556,
     556,
     556,
     889,
     556,
     556,
     556,
     556,
     556,
     278,
     278,
     278,
     278,
     611,
     611,
     611,
     611,
     611,
     611,
     611,
     549,
     611,
     611,
     611,
     611,
     611,
     556,
     611,
     556]},
   '/TT4': {'/BaseFont': '/TimesNewRomanPSMT',
    '/Encoding': '/WinAnsiEncoding',
    '/FirstChar': 0,
    '/FontDescriptor': {'/Ascent': 1007,
     '/CapHeight': 662,
     '/Descent': -307,
     '/Flags': 34,
     '/FontBBox': [-568, -307, 2000, 1007],
     '/FontFamily': 'Times New Roman',
     '/FontName': '/TimesNewRomanPSMT',
     '/FontStretch': '/Normal',
     '/FontWeight': 400,
     '/ItalicAngle': 0,
     '/StemV': 80,
     '/Type': '/FontDescriptor',
     '/XHeight': 448},
    '/LastChar': 255,
    '/Subtype': '/TrueType',
    '/Type': '/Font',
    '/Widths': [778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     778,
     250,
     333,
     408,
     500,
     500,
     833,
     778,
     180,
     333,
     333,
     500,
     564,
     250,
     333,
     250,
     278,
     500,
     500,
     500,
     500,
     500,
     500,
     500,
     500,
     500,
     500,
     278,
     278,
     564,
     564,
     564,
     444,
     921,
     722,
     667,
     667,
     722,
     611,
     556,
     722,
     722,
     333,
     389,
     722,
     611,
     889,
     722,
     722,
     556,
     722,
     667,
     556,
     611,
     722,
     722,
     944,
     722,
     722,
     611,
     333,
     278,
     333,
     469,
     500,
     333,
     444,
     500,
     444,
     500,
     444,
     333,
     500,
     500,
     278,
     278,
     500,
     278,
     778,
     500,
     500,
     500,
     500,
     333,
     389,
     278,
     500,
     500,
     722,
     500,
     500,
     444,
     480,
     200,
     480,
     541,
     350,
     500,
     350,
     333,
     500,
     444,
     1000,
     500,
     500,
     333,
     1000,
     556,
     333,
     889,
     350,
     611,
     350,
     350,
     333,
     333,
     444,
     444,
     350,
     500,
     1000,
     333,
     980,
     389,
     333,
     722,
     350,
     444,
     722,
     250,
     333,
     500,
     500,
     500,
     500,
     200,
     500,
     333,
     760,
     276,
     500,
     564,
     333,
     760,
     500,
     400,
     549,
     300,
     300,
     333,
     576,
     453,
     333,
     333,
     300,
     310,
     500,
     750,
     750,
     750,
     444,
     722,
     722,
     722,
     722,
     722,
     722,
     889,
     667,
     611,
     611,
     611,
     611,
     333,
     333,
     333,
     333,
     722,
     722,
     722,
     722,
     722,
     722,
     722,
     564,
     722,
     722,
     722,
     722,
     722,
     722,
     556,
     500,
     444,
     444,
     444,
     444,
     444,
     444,
     667,
     444,
     444,
     444,
     444,
     444,
     278,
     278,
     278,
     278,
     500,
     500,
     500,
     500,
     500,
     500,
     500,
     549,
     500,
     500,
     500,
     500,
     500,
     500,
     500,
     500]},
   '/TT5': {'/BaseFont': '/ZNNWAA+LucidaCalligraphy-Italic',
    '/Encoding': '/WinAnsiEncoding',
    '/FirstChar': 32,
    '/FontDescriptor': {'/Ascent': 958,
     '/CapHeight': 741,
     '/Descent': -325,
     '/Flags': 98,
     '/FontBBox': [-290, -325, 1287, 958],
     '/FontFamily': 'Lucida Calligraphy',
     '/FontFile2': {'/Filter': '/FlateDecode', '/Length1': 11512},
     '/FontName': '/ZNNWAA+LucidaCalligraphy-Italic',
     '/FontStretch': '/Normal',
     '/FontWeight': 400,
     '/ItalicAngle': -12,
     '/StemV': 100,
     '/Type': '/FontDescriptor',
     '/XHeight': 541},
    '/LastChar': 121,
    '/Subtype': '/TrueType',
    '/ToUnicode': {'/Filter': '/FlateDecode'},
    '/Type': '/Font',
    '/Widths': [332,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     283,
     0,
     283,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     786,
     0,
     0,
     735,
     0,
     0,
     0,
     0,
     0,
     0,
     669,
     0,
     0,
     0,
     0,
     0,
     0,
     581,
     715,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     668,
     615,
     546,
     668,
     542,
     409,
     614,
     664,
     376,
     0,
     631,
     339,
     1024,
     711,
     583,
     664,
     0,
     563,
     451,
     456,
     697,
     705,
     945,
     710,
     693]}},
  '/XObject': {'/Im0': {'/BitsPerComponent': 8,
    '/ColorSpace': ['/ICCBased', IndirectObject(970, 0)],
    '/DecodeParms': {'/BitsPerComponent': 8, '/Colors': 3, '/Columns': 309},
    '/Filter': '/FlateDecode',
    '/Height': 309,
    '/Name': '/X',
    '/Subtype': '/Image',
    '/Type': '/XObject',
    '/Width': 309}}},
 '/Rotate': 90,
 '/StructParents': 0,
 '/Type': '/Page'}

In [28]: pdfWriter = PyPDF2.PdfFileWriter()

In [29]: pdfWriter.addPage(page)

In [30]: resultPdfFile=open('rotatedPage.pdf', 'wb')

In [31]: pdfWriter.write(resultPdfFile)

In [32]: resultPdfFile.close()

In [33]: minutesFile.close()

In [34]: minutesFile = open('meetingminutes.pdf', 'rb')

In [35]: pdfReader = PyPDF2.PdfFileReader(minutesFile)

In [36]: minutesFirstPage = pdfReader.getPage(0)

In [37]: pdfWatermarkReader = PyPDF2.PdfFileReader(open('watermark.pdf', 'rb'))

In [38]: minutesFirstPage.mergePage(pdfWatermarkReader.getPage(0))

In [39]: pdfWriter = PyPDF2.PdfFileWriter()

In [40]: pdfWriter.addPage(minutesFirstPage)

In [41]: for pageNum in range(1, pdfReader.numPages):
    ...:     pageObj = pdfReader.getPage(pageNum)
    ...:     pdfWriter.addPage(pageObj)
    ...:     

In [42]: resultPdfFile = open('watermarkedCover.pdf', 'wb')

In [43]: pdfWriter.write(resultPdfFile)

In [44]: minutesFile.close()

In [45]: resultPdfFile.close()

In [46]: pdfFile = open('meetingminutes.pdf','rb')

In [47]: pdfReader = PyPDF2.PdfFileReader(pdfFile)

In [48]: pdfWriter = PyPDF2.PdfFileWriter()

In [49]: for pageNum in range(pdfReader.numPages):
    ...:     pdfWriter.addPage(pdfReader.getPage(pageNum))
    ...:     

In [50]: pdfWriter.encrypt('swordfish')

In [51]: resultPdf = open('encryptedminutes.pdf', 'wb')

In [52]: pdfWriter.write(resultPdf)

In [53]: resultPdf.close()

In [54]: import docx

In [55]: doc = docx.Document('demo.docx')
---------------------------------------------------------------------------
PackageNotFoundError                      Traceback (most recent call last)
<ipython-input-55-cb11ef66ed1c> in <module>()
----> 1 doc = docx.Document('demo.docx')

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/docx/api.py in Document(docx)
     23     """
     24     docx = _default_docx_path() if docx is None else docx
---> 25     document_part = Package.open(docx).main_document_part
     26     if document_part.content_type != CT.WML_DOCUMENT_MAIN:
     27         tmpl = "file '%s' is not a Word file, content type is '%s'"

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/docx/opc/package.py in open(cls, pkg_file)
    114         *pkg_file*.
    115         """
--> 116         pkg_reader = PackageReader.from_file(pkg_file)
    117         package = cls()
    118         Unmarshaller.unmarshal(pkg_reader, package, PartFactory)

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/docx/opc/pkgreader.py in from_file(pkg_file)
     30         Return a |PackageReader| instance loaded with contents of *pkg_file*.
     31         """
---> 32         phys_reader = PhysPkgReader(pkg_file)
     33         content_types = _ContentTypeMap.from_xml(phys_reader.content_types_xml)
     34         pkg_srels = PackageReader._srels_for(phys_reader, PACKAGE_URI)

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/docx/opc/phys_pkg.py in __new__(cls, pkg_file)
     29             else:
     30                 raise PackageNotFoundError(
---> 31                     "Package not found at '%s'" % pkg_file
     32                 )
     33         else:  # assume it's a stream and pass it to Zip reader to sort out

PackageNotFoundError: Package not found at 'demo.docx'

In [56]: doc = docx.Document('demo.docx')

In [57]: len(doc.paragraphs)
Out[57]: 7

In [58]: doc.paragraphs[0].text
Out[58]: 'Document Title'

In [59]: doc.paragraphs[1].text
Out[59]: 'A plain paragraph with some bold and some italic'

In [60]: len(doc.paragraphs[1].runs)
Out[60]: 5

In [61]: doc.paragraphs[1].runs[0].text
Out[61]: 'A plain paragraph with'

In [62]: doc.paragraphs[1].runs[1].text
Out[62]: ' some '

In [63]: doc.paragraphs[1].runs[2].text
Out[63]: 'bold'

In [64]: doc.paragraphs[1].runs[3].text
Out[64]: ' and some '

In [65]: doc.paragraphs[1].runs[4].text
Out[65]: 'italic'

In [66]: import readDocx

In [67]: print(readDocx.getText('demo.docx'))
Document Title

A plain paragraph with some bold and some italic

Heading, level 1

Intense quote

first item in unordered list

first item in ordered list




In [68]: doc = docx.Document('demo.docx')

In [69]: doc.paragraphs[0].text
Out[69]: 'Document Title'

In [70]: doc.paragraphs[0].style
Out[70]: _ParagraphStyle('Title') id: 4336453952

In [71]: doc.paragraphs[0].style = 'Normal'

In [72]: doc.paragraphs[1].text
Out[72]: 'A plain paragraph with some bold and some italic'

In [73]: (doc.paragraphs[1].runs[0].text, doc.paragraphs[1].runs[1].text, doc.
    ...: paragraphs[1].runs[2].text, doc.paragraphs[1].runs[3].text)
Out[73]: ('A plain paragraph with', ' some ', 'bold', ' and some ')

In [74]: doc.paragraphs[1].runs[0].style = 'QuoteChar'
UserWarning: style lookup by style_id is deprecated. Use style name as key instead. [styles.py:54]

In [75]: doc.paragraphs[1].runs[1].underline = True

In [76]: doc.paragraphs[1].runs[3].underline = True

In [77]: doc.save('restyled.docx')

In [78]: doc = docx.Document()

In [79]: doc.add_paragraph('Hello world!')
Out[79]: <docx.text.paragraph.Paragraph at 0x102794240>

In [80]: doc.save('helloworld.docx')

In [81]: doc = docx.Document()

In [82]: doc.add_paragraph('Hello world!')
Out[82]: <docx.text.paragraph.Paragraph at 0x1027a8c18>

In [83]: paraObj1 = doc.add_paragraph('This is a second paragraph.')

In [84]: paraObj2 = doc.add_paragraph('This is yet another paragraph.')

In [85]: paraObj1.add_run('This text is being added to the second paragraph.')
Out[85]: <docx.text.run.Run at 0x1027a86a0>

In [86]: doc.save('mulitpleParagraphs.docx')

In [87]: doc = docx.Document()

In [88]: doc.add_heading('Header 0', 0)
Out[88]: <docx.text.paragraph.Paragraph at 0x1027a8a90>

In [89]: doc.add_heading('Header 1', 1)
Out[89]: <docx.text.paragraph.Paragraph at 0x1027b1c88>

In [90]: doc.add_heading('Header 2', 2)
Out[90]: <docx.text.paragraph.Paragraph at 0x102785358>

In [91]: doc.add_heading('Header 3', 3)
Out[91]: <docx.text.paragraph.Paragraph at 0x1027b1ef0>

In [92]: doc.add_heading('Header 4', 4)
Out[92]: <docx.text.paragraph.Paragraph at 0x1027a8208>

In [93]: doc.save('headings.docx)
  File "<ipython-input-93-208c1fa12609>", line 1
    doc.save('headings.docx)
                            ^
SyntaxError: EOL while scanning string literal


In [94]: doc.save('headings.docx'
    ...: )

In [95]: doc.add_paragraph('This is on the first page!')
Out[95]: <docx.text.paragraph.Paragraph at 0x10676aeb8>

In [96]: doc.paragraphs[0].runs[0].add_break(docx.text.WD_BREAK.PAGE)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-96-76cd061fa844> in <module>()
----> 1 doc.paragraphs[0].runs[0].add_break(docx.text.WD_BREAK.PAGE)

AttributeError: module 'docx.text' has no attribute 'WD_BREAK'

In [97]:  doc.add_picture('zophie.png', width=docx.shared.Inches(1),
    ...: height=docx.shared.Cm(4))
Out[97]: <docx.shape.InlineShape at 0x1067db940>

In [98]: 

